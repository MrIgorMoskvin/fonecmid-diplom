#Область СлужебныеПроцедурыИФункции
Процедура ВКМ_ОтправкаСообщенийВТелеграм(СообщатьРезультат = Ложь) Экспорт
	
  // отберем все тексты
  Запрос = Новый Запрос;
  Запрос.Текст = "ВЫБРАТЬ
  |	ВКМ_УведомленияТелеграмБоту.Ссылка,
  |	ВКМ_УведомленияТелеграмБоту.Текст
  |ИЗ
  |	Справочник.ВКМ_УведомленияТелеграмБоту КАК ВКМ_УведомленияТелеграмБоту
  |ГДЕ
  |	ВКМ_УведомленияТелеграмБоту.ВремяОтправки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
  
  Выборка = Запрос.Выполнить().Выбрать();
  
  Пока Выборка.Следующий() Цикл
  	
  	// отправить текст в Telegram
  	РезультатОтправкиВТелеграмм = ВКМ_Телеграм.ТелеграмОтправитьСообщение(Выборка.Текст);
  	Если РезультатОтправкиВТелеграмм = 200 Тогда
	  	// удалить сообщение
	    СообщениеСправочника = Выборка.Ссылка.ПолучитьОбъект();
	//    СообщениеСправочника.Удалить();   
	  	// поставим время отправки
	  	//ОбщегоНазначения.УстановитьЗначениеРеквизита(СообщениеСправочника, "ВремяОтправки", ТекущаяДатаСеанса());
	  	СообщениеСправочника.ВремяОтправки = ТекущаяДатаСеанса();
	  	СообщениеСправочника.Записать();
	 КонецЕсли;
  КонецЦикла;
  
  Если СообщатьРезультат = Истина Тогда
  	ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Отправлено сообщений %1", Выборка.Количество()));   
  КонецЕсли;
  	
КонецПроцедуры

Функция ВКМ_СоздатьРасписаниеФоновогоЗадания()
	
	
	Расписание = Новый РасписаниеРегламентногоЗадания();
	Расписание.ВремяНачала 	= Дата("01.11.2024 09:00:00");
	Расписание.ВремяКонца	= Дата("31.12.2024 23:59:59");
	Расписание.ПериодПовтораВТечениеДня	= 300; // каждые 300 секунд повторять
	
//	ДниНедели = Новый Массив();   // понедельник, вторник, суббота
//	ДниНедели.Добавить(1);
//	ДниНедели.Добавить(2);
//	ДниНедели.Добавить(6);
//	
//	Расписание.ДниНедели = ДниНедели;
//	
//	Месяцы = Новый Массив();   // май, июль, август, декабрь, сентябрь
//	Месяцы.Добавить(5);	
//	Месяцы.Добавить(7);
//	Месяцы.Добавить(8);
//	Месяцы.Добавить(12);	
//	Месяцы.Добавить(9);	
//	
//	Расписание.Месяцы = Месяцы;
	
	Расписание.ПериодПовтораДней = 1; 
//	Расписание.ПериодНедель	= 1; 
	
	Возврат Расписание;
	
КонецФункции	

Процедура ВКМ_СоздатьРегламентноеЗадание() Экспорт
	
	Если ВКМ_ПолучитьИдентификаторЗадания() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// конструктор параметров задания
	ПараметрыЗадания = Новый Структура;
	
	// обращение метаданным конфигурации
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ВКМ_ОтправкаСообщений);
	
	// потребуется, чтобы передать в выполняемую функцию
//	МассивПараметров = Новый Массив();
//	МассивПараметров.Добавить("");
//	МассивПараметров.Добавить(""); 	
//	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	ПараметрыЗадания.Вставить("Расписание", ВКМ_СоздатьРасписаниеФоновогоЗадания());
	
	ПараметрыЗадания.Вставить("Наименование", "Отправка сообщений специалистам");
	ПараметрыЗадания.Вставить("Ключ", "ВКМ_ОтправкаСообщений");    
	
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",    0);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 0);
	ПараметрыЗадания.Вставить("Использование", Истина);	
	
	НовРегЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
    ВКМ_СохранитьИдентификаторЗадания(НовРегЗадание.УникальныйИдентификатор);	
	
КонецПроцедуры

Процедура ВКМ_СохранитьИдентификаторЗадания(ИдЗадания) Экспорт
	Константы.ВКМ_РегламентноеЗадание.Установить(ИдЗадания);
КонецПроцедуры

Функция ВКМ_ПолучитьИдентификаторЗадания() Экспорт
	Возврат Константы.ВКМ_РегламентноеЗадание.Получить();
КонецФункции
#КонецОбласти
